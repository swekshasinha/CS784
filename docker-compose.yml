version: "3"

services:

    zookeeper:
        image: zookeeper:3.6.1
        platform: linux/x86_64
        container_name: zookeeper
        hostname: zookeeper
        ports:
            - "2181:2181"
        networks:
            - crypto-network
      
    kafka:
        image: wurstmeister/kafka:2.13-2.6.0
        container_name: kafka
        hostname: kafka
        ports:
            - "9092:9092"
        environment:
            - KAFKA_ADVERTISED_HOST_NAME=kafka
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 
            - KAFKA_ADVERTISED_PORT=9092
            # format is - "topic-name:partitions:in-sync-replicas:cleanup-policy"
            - KAFKA_CREATE_TOPICS="crypto_topic:1:1:compact"
        networks:
            - crypto-network

    kafka-producer:
        image: python:3-alpine
        container_name: kafka-producer
        command: >
                sh -c "pip install -r /usr/share/producer/requirements.txt
                && python3 /usr/share/producer/kafkaProducerService.py"
        volumes:
            - ./kafkaProducer:/usr/share/producer
        networks: 
            - crypto-network
      
    cassandra:
        image: cassandra:3.11.8
        container_name: cassandra
        hostname: cassandra
        ports:
            - "9042:9042"
        volumes:
            - ./cassandraData:/var/lib/cassandra

        networks:
            - crypto-network
            
    spark-master:
        image: bde2020/spark-master:2.4.5-hadoop2.7
        container_name: spark-master
        hostname: spark-master
        ports:
            - "8080:8080"
            - "7077:7077"
            - "6066:6066"
        networks:
            - crypto-network
            
    spark-consumer-worker:
        image: bde2020/spark-worker:2.4.5-hadoop2.7
        container_name: spark-consumer-worker
        environment:
            - SPARK_MASTER=spark://spark-master:7077
        ports:
            - "8081:8081"
        volumes:
            - ./sparkConsumer:/sparkConsumer
        networks:
            - crypto-network

    node-backend:
        image: node:lts-alpine
        container_name: node-backend
        command: >
                sh -c "cd nodeBackend
                && npm install
                && sleep 30
                && node src/server.js"
        ports:
            - "5050:5050"
        volumes:
            - ./nodeRESTBackend:/nodeBackend
        networks: 
            - "crypto-network"
            
networks:
  crypto-network:
    driver: bridge